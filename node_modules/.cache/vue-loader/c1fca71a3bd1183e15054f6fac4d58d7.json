{"remainingRequest":"/Users/trilokia/devfest-jalandhar-2022/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/trilokia/devfest-jalandhar-2022/src/views/PartnersView.vue?vue&type=template&id=a44f3628&scoped=true&","dependencies":[{"path":"/Users/trilokia/devfest-jalandhar-2022/src/views/PartnersView.vue","mtime":1670123810023},{"path":"/Users/trilokia/devfest-jalandhar-2022/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js","mtime":1669743938000},{"path":"/Users/trilokia/devfest-jalandhar-2022/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1669744525000},{"path":"/Users/trilokia/devfest-jalandhar-2022/node_modules/@vue/cli-plugin-babel/node_modules/cache-loader/dist/cjs.js","mtime":1669743926000},{"path":"/Users/trilokia/devfest-jalandhar-2022/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1669744525000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}