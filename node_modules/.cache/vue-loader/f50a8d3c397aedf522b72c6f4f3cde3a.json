{"remainingRequest":"/Users/trilokia/devfest-jalandhar-2022/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/trilokia/devfest-jalandhar-2022/src/views/PartnersView.vue?vue&type=template&id=e1eb7b10&scoped=true&","dependencies":[{"path":"/Users/trilokia/devfest-jalandhar-2022/src/views/PartnersView.vue","mtime":1670124103731},{"path":"/Users/trilokia/devfest-jalandhar-2022/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js","mtime":1669743938000},{"path":"/Users/trilokia/devfest-jalandhar-2022/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1669744525000},{"path":"/Users/trilokia/devfest-jalandhar-2022/node_modules/@vue/cli-plugin-babel/node_modules/cache-loader/dist/cjs.js","mtime":1669743926000},{"path":"/Users/trilokia/devfest-jalandhar-2022/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1669744525000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cjx2LW1haW4+CiAgPHYtY29udGFpbmVyIGZsdWlkIGNsYXNzPSIiPgogICAgPHYtcm93IGp1c3RpZnk9ImNlbnRlciIgYWxpZ249ImNlbnRlciI+CiAgICAgIDx2LWNvbCBtZD0iMTIiIHNtPSIxMiIgY29scz0iMTIiIGxnPSIxMCIgY2xhc3M9Imdvb2dsZS1mb250IG15LTEwIj4KICAgICAgICA8di1jb250YWluZXIgZmx1aWQ+CiAgICAgICAgICA8di1yb3c+CiAgICAgICAgICAgIDx2LWNvbCBtZD0iMTIiIGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgPHAgY2xhc3M9Imdvb2dsZS1mb250IGdkZy1oMSBtYi0wIGdyZXktLXRleHQgdGV4dC0tZGFya2VuLTIiPgogICAgICAgICAgICAgICAgU3BvbnNvcnMKICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPHA+U3BvbnNvcnMgZGVkaWNhdGVkIHRvIGJ1aWxkaW5nIHJlbWFya2FibGUgZXhwZXJpZW5jZSE8L3A+CiAgICAgICAgICAgICAgPHYtYnRuCiAgICAgICAgICAgICAgICBkZXByZXNzZWQKICAgICAgICAgICAgICAgIHJvdW5kZWQKICAgICAgICAgICAgICAgIGNvbG9yPSIjNDI4NUY0IgogICAgICAgICAgICAgICAgZGFyawogICAgICAgICAgICAgICAgaHJlZj0ibWFpbHRvOmdkZ2phbW11QGdtYWlsLmNvbT9zdWJqZWN0PVtTcG9uc29yc2hpcF0gRGV2ZmVzdCBKYW1tdSIKICAgICAgICAgICAgICAgIHRhcmdldD0iX2JsYW5rIgogICAgICAgICAgICAgICAgY2xhc3M9Im14LTEgbXQtMSIKICAgICAgICAgICAgICAgID5CZWNvbWUgYSBTcG9uc29yPC92LWJ0bgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICA8di1idG4KICAgICAgICAgICAgICAgIGRlcHJlc3NlZAogICAgICAgICAgICAgICAgcm91bmRlZAogICAgICAgICAgICAgICAgY29sb3I9IiM0Mjg1RjQiCiAgICAgICAgICAgICAgICB0YXJnZXQ9Il9ibGFuayIKICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3ByZXNlbnRhdGlvbi9kLzExY1J1aTJ6TWF1UWdHRHZjRFFZOUZ2RnNRRXozSzFod0hFT2YySnZQZGdzL2VkaXQ/dXNwPXNoYXJpbmciCiAgICAgICAgICAgICAgICBvdXRsaW5lZAogICAgICAgICAgICAgICAgY2xhc3M9Im14LTEgbXQtMSIKICAgICAgICAgICAgICAgID5JbmZvcm1hdGlvbiBCcm9jaHVyZTwvdi1idG4KICAgICAgICAgICAgICA+CiAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICA8L3Ytcm93PgoKICAgICAgICAgIDx2LXJvdyBjbGFzcz0iIiBqdXN0aWZ5PSJjZW50ZXIiIGFsaWduPSJjZW50ZXIiPgogICAgICAgICAgICA8di1jb2wgbWQ9IjEyIiBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgIAogICAgICAgICAgICAgIDx2LWNvbnRhaW5lciBmbHVpZCBjbGFzcz0icHktMCBteS0wIj4KICAgICAgICAgICAgICAgIDx2LXJvdyBhbGlnbj0iY2VudGVyIiBqdXN0aWZ5PSJjZW50ZXIiIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICA8di1jb2wgbWQ9IjQiIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICAgIDxTcG9uc29yRGlhbG9nZVZ1ZQogICAgICAgICAgICAgICAgICAgICAgOml0ZW09InsKICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiAnaHR0cHM6Ly93d3cuZ3N0YXRpYy5jb20vZGV2cmVsLWRldnNpdGUvcHJvZC92ZGIxNDljZGMwOGM4N2FiMjQ5Y2RlYmZlYzYzOTVlOGYwNzMwNTZkNzUyY2E5YzJkMjg1ZDNiODQyNmZjZmEzMi9kZXZlbG9wZXJzL2ltYWdlcy9sb2NrdXAuc3ZnJywKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0dvb2dsZSBEZXZlbG9wZXInLAogICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBgR29vZ2xlIERldmVsb3BlcnMgaXMgR29vZ2xlJ3Mgc2l0ZSBmb3Igc29mdHdhcmUgZGV2ZWxvcG1lbnQgdG9vbHMgYW5kIHBsYXRmb3JtcywgYXBwbGljYXRpb24gcHJvZ3JhbW1pbmcgaW50ZXJmYWNlcywgYW5kIHRlY2huaWNhbCByZXNvdXJjZXMuIFRoZSBzaXRlIGNvbnRhaW5zIGRvY3VtZW50YXRpb24gb24gdXNpbmcgR29vZ2xlIGRldmVsb3BlciB0b29scyBhbmQgQVBJc+KAlGluY2x1ZGluZyBkaXNjdXNzaW9uIGdyb3VwcyBhbmQgYmxvZ3MgZm9yIGRldmVsb3BlcnMgdXNpbmcgR29vZ2xlJ3MgZGV2ZWxvcGVyIHByb2R1Y3RzLmAsCiAgICAgICAgICAgICAgICAgICAgICAgIGxpbms6ICdodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbScsCiAgICAgICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgIDwvdi1jb250YWluZXI+CgogICAgICAgICAgICA8IS0tICA8cCBjbGFzcz0iZ29vZ2xlLWZvbnQgbXQtMTAgbWItbjIiPkRpYW1vbmQgU3BvbnNvcnM8L3A+CiAgICAgICAgICAgICAgPHYtY29udGFpbmVyIGZsdWlkPgogICAgICAgICAgICAgICAgPHYtcm93IGFsaWduPSJjZW50ZXIiIGp1c3RpZnk9ImNlbnRlciI+CiAgICAgICAgICAgICAgICAgIDx2LWNvbCBtZD0iMiI+CiAgICAgICAgICAgICAgICAgICAgPFNwb25zb3JEaWFsb2dlVnVlCiAgICAgICAgICAgICAgICAgICAgICA6aXRlbT0iewogICAgICAgICAgICAgICAgICAgICAgICBpbWc6ICdodHRwczovL3N0YXRpYy53aXhzdGF0aWMuY29tL21lZGlhLzA1MGZmZF82NDc3MDQ5YjNjZTY0N2VjYWVlNTUxNmI3MTdmYTQxMX5tdjIucG5nL3YxL2Nyb3AveF8wLHlfMTgsd183NTAsaF8yMTcvZmlsbC93XzQ1MixoXzEzMCxhbF9jLHFfODUsdXNtXzAuNjZfMS4wMF8wLjAxLGVuY19hdXRvLzA1MGZmZF82NDc3MDQ5YjNjZTY0N2VjYWVlNTUxNmI3MTdmYTQxMX5tdjIucG5nJywKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1ZhcmRpYW5vJywKICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogYEluZGlhJ3MgIzEgb25saW5lIHN0b3JlIHdpdGggVG9wIHJhdGVkIHByb2R1Y3RzIGZyb20gdG9wIHJhdGVkIGdsb2JhbCBicmFuZHMgb24gc2luZ2xlIHN0b3JlIGF0IGJlc3QgcHJpY2VzLiBObyBuZWVkIHRvIHN1cmYgZnJvbSBvbmUgd2Vic2l0ZSB0byBvdGhlci5gLAogICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiAnaHR0cHM6Ly93d3cudmFyZGlhbm8uY29tLycsCiAgICAgICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgIDwvdi1jb250YWluZXI+CgogICAgICAgICAgICAgIDxwIGNsYXNzPSJnb29nbGUtZm9udCBtdC0xMCBtYi1uMiI+UGxhdGludW0gU3BvbnNvcnM8L3A+CiAgICAgICAgICAgICAgPHYtY29udGFpbmVyIGZsdWlkPgogICAgICAgICAgICAgICAgPHYtcm93IGFsaWduPSJjZW50ZXIiIGp1c3RpZnk9ImNlbnRlciI+CiAgICAgICAgICAgICAgICAgIDx2LWNvbCBtZD0iMiI+CiAgICAgICAgICAgICAgICAgICAgPFNwb25zb3JEaWFsb2dlVnVlCiAgICAgICAgICAgICAgICAgICAgICA6aXRlbT0iewogICAgICAgICAgICAgICAgICAgICAgICBpbWc6ICdodHRwczovL3RoZW1lLnpkYXNzZXRzLmNvbS90aGVtZV9hc3NldHMvOTQ0MjA1Ny9lZmMzODIwZTQzNmY5MTUwYmM4Y2YzNDI2N2ZmZjRkZjA1MmExZjljLnBuZycsCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdTdHJlYW0nLAogICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBgU3RyZWFtJ3MgPGEgaHJlZj0naHR0cHM6Ly9nZXRzdHJlYW0uaW8vY2hhdC9zZGsvYW5kcm9pZC8/dXRtX3NvdXJjZT1EZXZGZXN0JnV0bV9tZWRpdW09V2hvbGVfRXZlbnRfTCZ1dG1fY29udGVudD1EZXZlbG9wZXImdXRtX2NhbXBhaWduPURldkZlc3RfT2N0b2JlcjIwMjJfQW5kcm9pZENoYXRTREtfa2xtaDIyJz5BbmRyb2lkPC9hPiAmIDxhIGhyZWY9J2h0dHBzOi8vZ2V0c3RyZWFtLmlvL2NoYXQvc2RrL2ZsdXR0ZXIvP3V0bV9zb3VyY2U9RGV2RmVzdCZ1dG1fbWVkaXVtPVdob2xlX0V2ZW50X0wmdXRtX2NvbnRlbnQ9RGV2ZWxvcGVyJnV0bV9jYW1wYWlnbj1EZXZGZXN0X09jdG9iZXIyMDIyX0ZsdXR0ZXJDaGF0U0RLX2tsbWgyMic+Rmx1dHRlcjwvYT4gU0RLcyBsYXVuY2ggY2hhdCBmYXN0ZXIgYW5kIGl0cyBVSSBjb21wb25lbnRzIG1ha2UgaXQgZWFzeSB0byBjdXN0b21pemUuIFRyeSBpdCBmb3IgZnJlZSB0b2RheSFgLAogICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiAnaHR0cHM6Ly9nZXRzdHJlYW0uaW8vY2hhdC9zZGsvYW5kcm9pZC8/dXRtX3NvdXJjZT1EZXZGZXN0JnV0bV9tZWRpdW09V2hvbGVfRXZlbnRfTCZ1dG1fY29udGVudD1EZXZlbG9wZXImdXRtX2NhbXBhaWduPURldkZlc3RfT2N0b2JlcjIwMjJfQW5kcm9pZENoYXRTREtfa2xtaDIyJywKICAgICAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgPC92LWNvbnRhaW5lcj4KCiAgICAgICAgICAgICAgPHAgY2xhc3M9Imdvb2dsZS1mb250IG10LTEwIG1iLW4yIj5Hb2xkIFNwb25zb3JzPC9wPgogICAgICAgICAgICAgIDx2LWNvbnRhaW5lciBmbHVpZD4KICAgICAgICAgICAgICAgIDx2LXJvdyBhbGlnbj0iY2VudGVyIiBqdXN0aWZ5PSJjZW50ZXIiPgogICAgICAgICAgICAgICAgICA8di1jb2wgbWQ9IjIiPgogICAgICAgICAgICAgICAgICAgIDxTcG9uc29yRGlhbG9nZVZ1ZQogICAgICAgICAgICAgICAgICAgICAgOml0ZW09InsKICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0dERy1KYWxhbmRoYXIvV2Vic2l0ZURhdGEvbWFzdGVyL3BhcnRuZXJzL2pldGJyYWlucy5wbmcnLAogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnSmV0QnJhaW5zJywKICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogYEpldEJyYWlucyBpcyBhIGN1dHRpbmctZWRnZSBzb2Z0d2FyZSB2ZW5kb3Igc3BlY2lhbGl6aW5nIGluIHRoZSBjcmVhdGlvbiBvZiBpbnRlbGxpZ2VudCBkZXZlbG9wbWVudCB0b29scywgaW5jbHVkaW5nIEludGVsbGlKIElERUFgLAogICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiAnaHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS8nLAogICAgICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICA8L3YtY29udGFpbmVyPgoKICAgICAgICAgICAgICA8cCBjbGFzcz0iZ29vZ2xlLWZvbnQgbXQtMTAgbWItbjIiPlNpbHZlciBTcG9uc29yczwvcD4KICAgICAgICAgICAgICA8di1jb250YWluZXIgZmx1aWQ+CiAgICAgICAgICAgICAgICA8di1yb3cgYWxpZ249ImNlbnRlciIganVzdGlmeT0iY2VudGVyIj4KICAgICAgICAgICAgICAgICAgPHYtY29sIG1kPSIyIj4KICAgICAgICAgICAgICAgICAgICA8U3BvbnNvckRpYWxvZ2VWdWUKICAgICAgICAgICAgICAgICAgICAgIDppdGVtPSJ7CiAgICAgICAgICAgICAgICAgICAgICAgIGltZzogYGh0dHBzOi8vY2RuLWltYWdlcy0xLm1lZGl1bS5jb20vbWF4Lzk4MC8xKmFIaUlKY1lRNWp3LXRMaVVuak4yWFFAMngucG5nYCwKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0ltcHVsc2l2ZSBXZWInLAogICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBgV2UgYXJlIGFuIG9wdGltaXN0aWMgdGVhbSBvZiBtb2Rlcm4gdGhpbmtpbmcsIGNyZWF0aXZlIGRlc2lnbmVycywgaGktdGVjaCBkZXZlbG9wZXJzLiBXZSBiZWxpZXZlIHRoYXQgb25seSBza3kgaXMgdGhlIGxpbWl0IGFuZCB3aGVuIGl0IGNvbWVzIHRvIGltYWdpbmF0aW9uIG5vdGhpbmcgY2FuIGJhcnJlZCB5b3UgdXAuYCwKICAgICAgICAgICAgICAgICAgICAgICAgbGluazogJ2h0dHBzOi8vd3d3LmltcHVsc2l2ZXdlYi5jb20vJywKICAgICAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgPC92LWNvbnRhaW5lcj4KCgogICAgICAgICAgICAgIDxwIGNsYXNzPSJnb29nbGUtZm9udCBtdC0xMCBtYi1uMiI+SGlyaW5nIFBhcnRuZXJzPC9wPgogICAgICAgICAgICAgIDx2LWNvbnRhaW5lciBmbHVpZD4KICAgICAgICAgICAgICAgIDx2LXJvdyBhbGlnbj0iY2VudGVyIiBqdXN0aWZ5PSJjZW50ZXIiPgogICAgICAgICAgICAgICAgICA8di1jb2wgbWQ9IjIiPgogICAgICAgICAgICAgICAgICAgIDxTcG9uc29yRGlhbG9nZVZ1ZQogICAgICAgICAgICAgICAgICAgICAgOml0ZW09InsKICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0dERy1KYWxhbmRoYXIvV2Vic2l0ZURhdGEvbWFzdGVyL3BhcnRuZXJzL0N5YmVydHJvbi5qcGcnLAogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnQ3liZXJ0cm9uIFRlY2hub2xvZ2llcycsCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGBXZSBhcmUgYSBNb2JpbGUgQXBwIGFuZCAgV2Vic2l0ZSBEZXZlbG9wbWVudCBGaXJtIGJhc2VkIGluIE1vaGFsaSwgSW5kaWEuIFdlIHByb3ZpZGUgcHJvZ3JhbW1pbmcgc2VydmljZXMgdG8gbXVsdGlwbGUgY2xpZW50cyB0aHJvdWdob3V0IHRoZSBnbG9iZS4gT3VyIHRlYW0gaGFzIHNraWxscyBpbiBBbmd1bGFyLCBSZWFjdCwgTm9kZS5qcywgS290bGluLCBQeXRob24sIExhcmF2ZWwsIFNob3BpZnksIE15U1FML1Bvc3RncmVzL01vbmdvREIgZXRjLiBXZSBhcmUgZ29vZCBhdCBFeHByZXNzaW9uIEVuZ2luZSwgV29yZFByZXNzLCBDYWtlUEhQLCBCb290c3RyYXAsIFNBU1MgYW5kIGpRdWVyeS4gV2UgYWxzbyBkZXZlbG9wIG1vYmlsZSBhcHBzIGFuZCBQV0FzIGluIHRoZSBJb25pYy9DYXBhY2l0b3IgZnJhbWV3b3JrLiBJbiB0aGUgcGFzdCwgd2UgaGF2ZSB3b3JrZWQgd2l0aCBjbGllbnRzIGxpa2UgRGlzbmV5LCBQaGlsaXBzLCBNSVQsIEhhcnZhcmQgVW5pdmVyc2l0eSwgQW1lcmljYW4gUGhhcm1hY2lzdHMgQXNzb2NpYXRpb24gYW5kIE1vbmFzaCBVbml2ZXJzaXR5LmAsCiAgICAgICAgICAgICAgICAgICAgICAgIGxpbms6ICdodHRwczovL3d3dy5jeWJlcnRyb250ZWNobm9sb2dpZXMuY29tLycsCiAgICAgICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC92LXJvdz4KICAgICAgICAgICAgICA8L3YtY29udGFpbmVyPgoKICAgICAgICAgICAgICA8cCBjbGFzcz0iZ29vZ2xlLWZvbnQgbXQtMTAgbWItbjIiPktub3dsZWRnZSBQYXJ0bmVyczwvcD4KICAgICAgICAgICAgICA8di1jb250YWluZXIgZmx1aWQ+CiAgICAgICAgICAgICAgICA8di1yb3cgYWxpZ249ImNlbnRlciIganVzdGlmeT0iY2VudGVyIj4KICAgICAgICAgICAgICAgICAgPHYtY29sIG1kPSIyIj4KICAgICAgICAgICAgICAgICAgICA8U3BvbnNvckRpYWxvZ2VWdWUKICAgICAgICAgICAgICAgICAgICAgIDppdGVtPSJ7CiAgICAgICAgICAgICAgICAgICAgICAgIGltZzogJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9HREctSmFsYW5kaGFyL1dlYnNpdGVEYXRhL21hc3Rlci9wYXJ0bmVycy9kY2MyLnBuZycsCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdEYXRhIENlbnRlciBvbiBDbG91ZCcsCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGBEYXRhIENlbnRlciBPbiBDbG91ZCBpcyBwbGFjZSB3aGVyZSB5b3Ugd2lsbCBsZWFybiB0aGUgZnVuZGFtZW50YWxzIHRvIGFkdmFuY2UgY29uY2VwdHMgb2YgaG9zdGluZyB5b3VyIGFwcGxpY2F0aW9uIG9uIFB1YmxpYyBDbG91ZCBQbGF0Zm9ybXMuVGhpcyBpZGVhIGJlaGluZCB0aGlzIGNoYW5uZWwgaXMgdG8gcHJvdmlkZSB5b3UgdGhlIGd1aWRhbmNlIHRvIG1pZ3JhdGUgeW91ciBhcHBsaWNhdGlvbiB3aGljaCBjYW4gYmUgV2ViIEFwcHMsIERhdGFiYXNlcywgQnVzaW5lc3MgQXBwbGljYXRpb25zLCBIeWJyaWQgQ2xvdWQsIE11bHRpIENsb3VkIGV0Yy4gVGhlcmUgd2lsbCBiZSBzcGVjaWFsIGZvY3VzIG9uIENsb3VkIENlcnRpZmljYXRpb24gcHJlcGFyYXRpb25zLiBEQyBvbiBDbG91ZCBpcyBjb3ZlcmluZyBhbGwgdGhlIG1ham9yIENsb3VkIFBsYXRmb3JtcyBhdmFpbGFibGUgaW4gbWFya2V0LiBJZiB5b3UgYXJlIGxvb2tpbmcgdG8gc3RhcnQgeW91ciBsZWFybmluZyBvciBwbGFubmluZyB0byBhcHBlYXIgZm9yIEFtYXpvbiBXZWIgU2VydmljZXMsIE1pY3Jvc29mdCBBenVyZSwgR29vZ2xlIENsb3VkIFBsYXRmb3JtcyBleGFtcywgRGMgT24gQ2xvdWQgaXMgcHJvdmlkaW5nIHRoZSBjb250ZW50IGZvciB0aGUgc2FtZS5gLAogICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiAnaHR0cHM6Ly93d3cueW91dHViZS5jb20vYy9EYXRhQ2VudGVyT25DbG91ZC8nLAogICAgICAgICAgICAgICAgICAgICAgfSIKICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgICAgICAgICA8di1jb2wgbWQ9IjIiPgogICAgICAgICAgICAgICAgICAgIDxTcG9uc29yRGlhbG9nZVZ1ZQogICAgICAgICAgICAgICAgICAgICAgOml0ZW09InsKICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0dERy1KYWxhbmRoYXIvV2Vic2l0ZURhdGEvbWFzdGVyL3BhcnRuZXJzL3BjYnQtbG9nby5wbmcnLAogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnUHlyYW1pZCBDb2xsZWdlIE9mIEJ1c2luZXNzICYgVGVjaG5vbG9neScsCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGBQeXJhbWlkIENvbGxlZ2Ugb2ZmZXJzIHVuZGVyZ3JhZHVhdGUgJiBwb3N0Z3JhZHVhdGUgY291cnNlcyBpbiBjb21tZXJjZSwgQnVzaW5lc3MgU3R1ZGllcywgQ29tcHV0ZXIgQXBwbGljYXRpb25zLCBBbmltYXRpb24gJiBNdWx0aW1lZGlhLCBIb3RlbCBNYW5hZ2VtZW50LmAsCiAgICAgICAgICAgICAgICAgICAgICAgIGxpbms6ICdodHRwczovL3d3dy5weXJhbWlkY29sbGVnZS5lZHUuaW4vJywKICAgICAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgPC92LWNvbnRhaW5lcj4KCiAgICAgICAgICAgICAgPHAgY2xhc3M9Imdvb2dsZS1mb250IG10LTEwIG1iLW4yIj5Ib3NwaXRhbGl0eSBQYXJ0bmVyczwvcD4KICAgICAgICAgICAgICA8di1jb250YWluZXIgZmx1aWQ+CiAgICAgICAgICAgICAgICA8di1yb3cgYWxpZ249ImNlbnRlciIganVzdGlmeT0iY2VudGVyIj4KICAgICAgICAgICAgICAgICAgPHYtY29sIG1kPSIyIj4KICAgICAgICAgICAgICAgICAgICA8U3BvbnNvckRpYWxvZ2VWdWUKICAgICAgICAgICAgICAgICAgICAgIDppdGVtPSJ7CiAgICAgICAgICAgICAgICAgICAgICAgIGltZzogJ2h0dHBzOi8vaG90ZWxjYWJiYW5hLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMS8xMi9Mb2dvLXYzLnBuZycsCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdUaGUgQ2FiYmFuYSBSZXNvcnQgYW5kIFNwYSwgUGhhZ3dhcmEsIFB1bmphYicsCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGBUaGUgQ2FiYmFuYSByZXNvcnQgJiBzcGEgaXMgYSBsdXh1cnkgaG90ZWwgaW4gSmFsYW5kaGFyLCBQdW5qYWIuIFRoZSByZXNvcnQgaXMgbG9jYXRlZCBvbiB0aGUgb3V0c2tpcnRzIG9mIEphbGFuZGhhciBhbmQgb2ZmZXJzIGx1eHVyeSBhY2NvbW1vZGF0aW9uLmAsCiAgICAgICAgICAgICAgICAgICAgICAgIGxpbms6ICdodHRwczovL2hvdGVsY2FiYmFuYS5jb20vJywKICAgICAgICAgICAgICAgICAgICAgIH0iCiAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICAgICAgPC92LWNvbnRhaW5lcj4KCiAgICAgICAgICAgICAgPHAgY2xhc3M9Imdvb2dsZS1mb250IG10LTEwIG1iLW4yIj5UaWNrZXRpbmcgUGFydG5lcnM8L3A+CiAgICAgICAgICAgICAgPHYtY29udGFpbmVyIGZsdWlkPgogICAgICAgICAgICAgICAgPHYtcm93IGFsaWduPSJjZW50ZXIiIGp1c3RpZnk9ImNlbnRlciI+CiAgICAgICAgICAgICAgICAgIDx2LWNvbCBtZD0iMiI+CiAgICAgICAgICAgICAgICAgICAgPFNwb25zb3JEaWFsb2dlVnVlCiAgICAgICAgICAgICAgICAgICAgICA6aXRlbT0iewogICAgICAgICAgICAgICAgICAgICAgICBpbWc6ICdodHRwczovL2FsbGV2ZW50cy5zMy5hbWF6b25hd3MuY29tL21lZGlhLWtpdC9hZS1sb2dvLnBuZycsCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdhbGxldmVudHMnLAogICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBgTGFyZ2VzdCBFdmVudCBEaXNjb3ZlcnkgcGxhdGZvcm0gaGVscGluZyAxMCBtaWxsaW9uIHBlb3BsZSBkaXNjb3ZlciBldmVudHMgZXZlcnkgbW9udGghYCwKICAgICAgICAgICAgICAgICAgICAgICAgbGluazogJ2h0dHBzOi8vYWxsZXZlbnRzLmluLycsCiAgICAgICAgICAgICAgICAgICAgICB9IgogICAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L3Ytcm93PgogICAgICAgICAgICAgIDwvdi1jb250YWluZXI+LS0+CiAgICAgICAgICAgIDwvdi1jb2w+CiAgICAgICAgICA8L3Ytcm93PgoKICAgICAgICAgIDx2LXJvdyBqdXN0aWZ5PSJjZW50ZXIiIGFsaWduPSJjZW50ZXIiIGNsYXNzPSJteS1tZC0xMCBteS01Ij4KICAgICAgICAgICAgPHYtY29sIG1kPSIxMiI+CiAgICAgICAgICAgICAgPHYtZGl2aWRlcj48L3YtZGl2aWRlcj4KICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDwvdi1yb3c+CgogICAgICAgICAgPCEtLSBDb21tdW5pdHkgLS0+CiAgICAgICAgICA8di1yb3cgY2xhc3M9IiIgYWxpZ249ImNlbnRlciIganVzdGlmeT0iY2VudGVyIj4KICAgICAgICAgICAgPHYtY29sIG1kPSIxMSIgbGc9IjExIiBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgIAogICAgICAgICAgICAgIDxwIGNsYXNzPSJnb29nbGUtZm9udCBnZGctaDEgbWItMCBncmV5LS10ZXh0IHRleHQtLWRhcmtlbi0yIj4KICAgICAgICAgICAgICAgIENvbW11bml0eSBQYXJ0bmVycwogICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC92LWNvbD4KICAgICAgICAgIDwvdi1yb3c+CiAgICAgICAgICA8di1yb3cgY2xhc3M9InBhLTAgbWEtMCIganVzdGlmeT0ic3RhcnQiIGFsaWduPSJzdGFydCI+CiAgICAgICAgICAgIDx2LWNvbAogICAgICAgICAgICAgIGxnPSIzIgogICAgICAgICAgICAgIG1kPSIzIgogICAgICAgICAgICAgIHNtPSI0IgogICAgICAgICAgICAgIGNvbHM9IjEyIgogICAgICAgICAgICAgIGNsYXNzPSJweC0xIgogICAgICAgICAgICAgIHYtZm9yPSIoaXRlbSwgaW5kZXgpIGluIHBjIgogICAgICAgICAgICAgIDprZXk9ImluZGV4IgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgPFBhcnRuZXJEaWFsb2dlVnVlIDppdGVtPSJpdGVtIiAvPgogICAgICAgICAgICA8L3YtY29sPgogICAgICAgICAgPC92LXJvdz4KICAgICAgICA8L3YtY29udGFpbmVyPgogICAgICA8L3YtY29sPgogICAgPC92LXJvdz4KICA8L3YtY29udGFpbmVyPgo8L3YtbWFpbj4K"},null]}