{"remainingRequest":"/Users/trilokia/devfest-jalandhar-2022/node_modules/@vue/cli-plugin-babel/node_modules/thread-loader/dist/cjs.js!/Users/trilokia/devfest-jalandhar-2022/node_modules/babel-loader/lib/index.js!/Users/trilokia/devfest-jalandhar-2022/node_modules/vuetify/lib/directives/ripple/index.js","dependencies":[{"path":"/Users/trilokia/devfest-jalandhar-2022/node_modules/vuetify/lib/directives/ripple/index.js","mtime":1669743929000},{"path":"/Users/trilokia/devfest-jalandhar-2022/node_modules/@vue/cli-plugin-babel/node_modules/cache-loader/dist/cjs.js","mtime":1669743926000},{"path":"/Users/trilokia/devfest-jalandhar-2022/node_modules/@vue/cli-plugin-babel/node_modules/thread-loader/dist/cjs.js","mtime":1669743926000},{"path":"/Users/trilokia/devfest-jalandhar-2022/node_modules/babel-loader/lib/index.js","mtime":1669743929000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}